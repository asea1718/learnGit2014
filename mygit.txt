
----------------------------------这是我的git学习笔记---------------------------------------------------
（20140506）

Unix的哲学是“没有消息就是好消息”，git成功操作没有消息提示的
|--要先add再commit
****
配置使用git仓库的信息：
git config --global user.name "name"
git config --global user.email "email@email.com"
****
查看当前目录  pwd
****
创建文件夹  mkdir
****
通过git init命令把这个目录变成Git可以管理的仓库：git init
****
先在需要添加的git仓库中新建文件，然后命令添加：git add readme.txt
****
用命令git commit告诉Git，把文件提交到仓库：git commit -m "wrote a readme file"
【-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录】
****
git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。
****
git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式
****
查看修改过的版本信息：git log或者git log --pretty=oneline
****
在Git中，用HEAD表示当前版本，也就是最新的提交“ 3628164...882e1e0”（注意我的提交ID和你的肯定不一样），上一个版本就是
HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
返回上一个版本命令：git reset --hard HEAD^
用git log查看，但这样最新版本不见了
办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个不见那个版本的commit id
是“3628164...”，于是就可以指定回到未来的某个版本，命令：git reset --hard 3628164 【其中commitid不用输完唯一就行】
****
你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？
Git提供了一个命令git reflog用来记录你的每一次命令：git reflog
****
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
****
删除文件命令：
rm test.txt  【这里就是直接操作删除】
git rm test.txt  【这是删除在git工作区的文件】
git commit -m "del test"  【提交删除】
****
*****************远程仓库***************
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果
已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，
GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub
，就可以在每台电脑上往GitHub推送了。
最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可
写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相
当简单，公司内部开发必备。
确保你拥有一个GitHub账号后，我们就即将开始远程仓库的学习。
**
关联远程库：$ git remote add origin git@github.com:asea1718/learnGit2014.git 
【origin可以另取，git默认都设为origin远程库的意思】
**
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
$ git push -u origin master
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会
把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
从现在起，只要本地作了提交，就可以通过命令：$ git push origin master
*****
要查看远程库的信息，用：git remote
显示更详细的信息：git remote -v  【抓取（fetch）推送（push），如果没有推送权限，就看不到push的地址。】

*******************end***********************
********************分支************************
创建dev分支，然后切换到dev分支：$ git checkout -b dev

git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev

然后，用git branch命令查看当前分支：$ git branch
【git branch命令会列出所有分支，当前分支前面会标一个*号】
然后，我们就可以在dev分支上正常add和commit了

dev分支的工作完成，我们就可以切换回master分支：$ git checkout master
【切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点
并没有变】

我们把dev分支的工作成果合并到master分支上：$ git merge dev
【git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的】

合并完成后，就可以放心地删除dev分支了：$ git branch -d dev
【因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一
样的，但过程更安全。】

*****
查看分支具体情况：$ git log --graph --pretty=oneline --abbrev-commit


